name: Deploy Spring Backend

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy-backend:
    runs-on: ubuntu-latest

    steps:
      - name: "✅ Checkout Spring Code"
        uses: actions/checkout@v4

      - name: "☕ Setup Java 17"
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: "🧰 Setup Gradle (cache)"
        uses: gradle/actions/setup-gradle@v3

      - name: "🔐 Create application.properties"
        shell: bash
        run: |
          mkdir -p src/main/resources
          cat > src/main/resources/application.properties <<'PROPS'
          spring.datasource.url=${{ secrets.DB_URL }}
          spring.datasource.username=${{ secrets.DB_USERNAME }}
          spring.datasource.password=${{ secrets.DB_PASSWORD }}
          spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

          spring.jpa.hibernate.ddl-auto=update
          spring.jpa.show-sql=false
          spring.jpa.properties.hibernate.format_sql=true

          spring.jwt.secret=${{ secrets.JWT_SECRET }}
          spring.jwt.access-token-duration=10D
          spring.jwt.refresh-token-duration=100D

#          gpt.api-key=Bearer ${{ secrets.OPENAI_KEY }}
#          ai.url=${{ secrets.AI_URL }}

          cloud.aws.s3.bucket=${{ secrets.S3_BUCKET_NAME }}
          cloud.aws.region.static=${{ secrets.S3_BUCKET_REGION }}
          cloud.aws.stack.auto=false
          cloud.aws.credentials.access-key=${{ secrets.AWS_ACCESS_KEY_ID }}
          cloud.aws.credentials.secret-key=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          PROPS
          echo "[info] application.properties written."

      - name: "🔧 Make Gradle executable"
        run: chmod +x ./gradlew

      - name: "🏗️ Build (Jar)"
        run: ./gradlew clean build -x test

      - name: "🐳 Docker Hub Login"
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: "📦 Build & Push Docker image"
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/unithon:latest

      - name: "🚀 SSH to EC2 and redeploy"
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            cd ~/my-app
            docker compose pull backend
            docker compose up -d backend
            docker image prune -f
